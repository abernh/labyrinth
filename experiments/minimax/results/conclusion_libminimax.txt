October 17th, 2020
GameTreeNode on stack (local variable) instead of dynamically created on heap -> Speedup between 1.03 and 1.09
Only try 2 rotations for straights -> Speedup between 1.6 and 2.3
Location header-only (better inlining) -> slowed down by 5%

October 18th, 2020
shift: remove precomputation of changed locations, assign the nodes directly in one loop -> speedup between 1.04 and 1.09
optimize action iterator: (less shifts in negamax, less graph copying) let iterator return a const ref to the shifted graph.
   to this end, remove the stl compliance of the iterator, it is too much weight and not such a great value -> speedup between 1.5 and 1.7

Current status: minimax with 0-1 evaluation achieves 55 instances for maze size 7, and 6 instances for maze size 13 in the 3s limit.
The optimizations above combined resulted in a speedup between 3 and 5.

October 19th, 2020
remove copying, use one graph, shift and undo shifts. 
Also: not one shift for each rotation, instead rotate the inserted node inplace -> speedup about 2 for maze size 7, 4 for maze size 13!
bfs return vector reserve n -> speedup 1.1
optimize node neighbors: remove stl compliance of iterator. -> speedup 1.06
store rotation as enum instead of int. -> speedup 1.1
The high speedups for maze size 13 lead to great improvements for the achieved depths (3s limit): 55 instances for maze size 7, and 6 instances for maze size 13.

   
Ideas (try in this order)
- remove node ids? also: make node ids uint16_t instead of unsigned int.
- perform bfs without shift and store result with bounding box. iterate over this result if the shift does not touch the bounding box.
- rotation-aware bfs
- bfs without shift, then handle case where shift touches/cuts the reached locations. Datastructure which facilitates the required operations.
   also: only one vector of reachable locations, bfs adds into this vector.
- Compile-time ideas:
	* Neighbor computation
	* Rotating maze card

